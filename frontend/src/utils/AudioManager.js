/**
 * Audio Manager - Qu·∫£n l√Ω √¢m thanh cho ·ª©ng d·ª•ng thi l√°i xe
 * S·ª≠ d·ª•ng file √¢m thanh t·ª´ APK thay cho Text-to-Speech
 */

class AudioManager {
  constructor() {
    this.isEnabled = true
    this.volume = 0.9
    this.currentAudio = null
    
    // Mapping c√°c file √¢m thanh v·ªõi n·ªôi dung - CORRECTED MAPPING
    this.audioFiles = {
      // B√†i thi theo n·ªôi dung th·ª±c t·∫ø c·ªßa file √¢m thanh
      lessonStart: '0002.mp3',        // B·∫Øt ƒë·∫ßu thi
      lesson1: '1.mp3.mp3',           // Xu·∫•t ph√°t  
      lesson2: '3.mp3.mp3',           // D·ª´ng xe nh∆∞·ªùng ƒë∆∞·ªùng cho ng∆∞·ªùi ƒëi b·ªô
      lesson3: '4.mp3.mp3',           // D·ª´ng v√† kh·ªüi h√†nh ngang d·ªëc
      lesson4: 'vbxvvg.mp3',          // Qua v·ªát b√°nh xe (v∆∞·ª£t bi·ªÉn xanh v√†o v√πng c·∫•m)
      lesson5: '7.mp3.mp3',           // Qua ng√£ t∆∞ c√≥ t√≠n hi·ªáu giao th√¥ng
      lesson6: '6.mp3.mp3',           // ƒê∆∞·ªùng v√≤ng quanh co (ch·ªØ S)
      lesson7: '8.mp3.mp3',           // Gh√©p xe d·ªçc v√†o n∆°i ƒë·ªó
      lesson8: '16.mp3.mp3',          // T·∫°m d·ª´ng ƒë∆∞·ªùng s·∫Øt
      lesson9: '11.mp3.mp3',          // Thay ƒë·ªïi s·ªë tr√™n ƒë∆∞·ªùng th·∫≥ng  
      lesson10: '12.mp3.mp3',         // Gh√©p xe ngang
      lesson11: '13.mp3.mp3',         // K·∫øt th√∫c
      
      // √Çm thanh ƒë·∫∑c bi·ªát
      testBeep: '5.mp3.mp3',          // Ti·∫øng t√∫t nh·∫≠n b√†i thi
      alertSound: '0011.mp3',         // Ti·∫øng t·ªânh t√°o nh·∫≠n b·∫°n
      
      // √Çm thanh l·ªói v√† c·∫£nh b√°o - UPDATED MAPPING theo database m·ªõi
      emergency: 'khancap.mp3',           // Ch·ª©a ti·∫øng H√ö
      
      // L·ªói v·ªã tr√≠ - c√≥ file √¢m thanh t∆∞∆°ng ·ª©ng
      'D·ª´ng xe ch∆∞a ƒë·∫øn v·ªã tr√≠': 'dungxechuaden.mp3',
      'D·ª´ng xe ch∆∞a ƒë√∫ng v·ªã tr√≠': 'use_ai_voice', // B√†i 8 - Use AI voice to avoid confusion
      'Gh√©p xe ch∆∞a ƒë√∫ng v·ªã tr√≠': 'chuadungvitri.mp3', // B√†i 7, 10 - File n√†y n√≥i "gh√©p xe"
      
      // L·ªói b√°nh xe - c√≥ file √¢m thanh t∆∞∆°ng ·ª©ng  
      'B√°nh xe ƒë√® v·∫°ch': '9.mp3.mp3',           // File ri√™ng cho l·ªói b√°nh xe ƒë√® v·∫°ch
      'B√°nh xe ƒë√®v v·∫°ch': '9.mp3.mp3',          // Typo trong database b√†i 10
      'B√°nh xe kh√¥ng ƒëi v√¥ v·ªát b√°nh xe': 'use_ai_voice', // Use AI voice for this error
      
      // L·ªói c·ª• th·ªÉ c√≥ file √¢m thanh - UPDATED theo database m·ªõi
      'Xe b·ªã ch·∫øt m√°y': '0005.mp3',               // B√†i 3 - D·ª´ng xe kh·ªüi h√†nh ngang d·ªëc  
      'Kh√¥ng ƒë·∫°t t·ªëc ƒë·ªô': '19.mp3.mp3',          // B√†i 9 - TƒÉng t·ªëc ƒë∆∞·ªùng b·∫±ng
      
      // √Çm thanh th√¥ng b√°o k·∫øt qu·∫£
      'testPassed': '0013.mp3',          // B·∫°n ƒë√£ thi ƒë·∫°t
      'testCompleted': '13.mp3.mp3',     // B√†i thi k·∫øt th√∫c
      
      // Backward compatibility - c√°c key c≈©
      wrongPosition: 'chuadungvitri.mp3',
      notReachedYet: 'dungxechuaden.mp3', 
      passPosition: 'quavitri.mp3',
      wrongGear: 'vaobailkhongdungso.mp3',
      violation: '9.mp3.mp3', // Changed to use correct file for violations
      
      // √Çm thanh b·ªï sung
      error0004: '0004.mp3',
      error0005: '0005.mp3',
      error0006: '0006.mp3',
      error0007: '0007.mp3',
      error0008: '0008.mp3',
      error0009: '0009.mp3',
      error0012: '0012.mp3',
      error0013: '0013.mp3',
      error0016: '0016.mp3',
      error0019: '0019.mp3'
    }
    
    // Load settings t·ª´ localStorage
    this.loadSettings()
  }
  
  loadSettings() {
    try {
      const savedSettings = localStorage.getItem('driving_test_audio_settings')
      if (savedSettings) {
        const settings = JSON.parse(savedSettings)
        this.isEnabled = settings.isEnabled ?? true
        this.volume = settings.volume ?? 0.9
      }
    } catch (error) {
      console.error('Error loading audio settings:', error)
    }
  }
  
  saveSettings() {
    try {
      const settings = {
        isEnabled: this.isEnabled,
        volume: this.volume
      }
      localStorage.setItem('driving_test_audio_settings', JSON.stringify(settings))
    } catch (error) {
      console.error('Error saving audio settings:', error)
    }
  }
  
  /**
   * Ph√°t √¢m thanh theo key
   * @param {string} key - Key c·ªßa file √¢m thanh
   * @param {object} options - T√πy ch·ªçn ph√°t √¢m thanh
   */
  async play(key, options = {}) {
    if (!this.isEnabled) {
      return Promise.resolve()
    }
    
    const filename = this.audioFiles[key]
    
    if (!filename) {
      return Promise.resolve()
    }
    
    // Special handling for AI voice fallback
    if (filename === 'use_ai_voice') {
      return Promise.resolve() // Let TTS handle this
    }
    
    return new Promise((resolve, reject) => {
      try {
        // SPECIAL HANDLING for emergency audio - DO NOT stop current audio if it's the same emergency file
        if (key === 'emergency' && this.currentAudio && !this.currentAudio.paused) {
          const currentSrc = this.currentAudio.src
          const newAudioUrl = `/audio/${filename}`
          if (currentSrc.includes(filename)) {
            // Wait for current emergency audio to end naturally
            this.currentAudio.onended = () => {
              this.currentAudio = null
              resolve()
            }
            return
          }
        }
        
        // For non-emergency or different files, stop current audio
        if (this.currentAudio && key !== 'emergency') {
          this.currentAudio.pause()
          this.currentAudio.currentTime = 0
          this.currentAudio = null
        }
        
        // T·∫°o Audio object m·ªõi
        const audioUrl = `/audio/${filename}`
        
        this.currentAudio = new Audio(audioUrl)
        this.currentAudio.volume = options.volume ?? this.volume
        this.currentAudio.preload = 'auto'
        
        // CRITICAL: Ensure audio does NOT loop
        this.currentAudio.loop = false
        this.currentAudio.autoplay = false
        
        // Event handlers
        this.currentAudio.onended = () => {
          // DO NOT force stop here - audio ended naturally
          this.currentAudio = null
          resolve()
        }
        
        this.currentAudio.onerror = (error) => {
          console.error(`‚ùå Error playing audio ${filename}:`, error)
          console.error(`üîç Audio URL: ${audioUrl}`)
          if (this.currentAudio) {
            this.currentAudio = null
          }
          resolve() // Resolve thay v√¨ reject ƒë·ªÉ kh√¥ng break app
        }
        
        this.currentAudio.oncanplaythrough = () => {
          // Check if currentAudio still exists before calling play
          if (this.currentAudio) {
            this.currentAudio.play().then(() => {
            }).catch(error => {
              console.error(`‚ùå Failed to play audio ${filename}:`, error)
              if (this.currentAudio) {
                this.currentAudio = null
              }
              resolve()
            })
          } else {
            console.warn(`‚ö†Ô∏è Audio object became null before play for: ${filename}`)
            resolve()
          }
        }
        
        this.currentAudio.onloadstart = () => {
        }
        
        this.currentAudio.onloadeddata = () => {
        }
        
        // Load audio
        this.currentAudio.load()
        
      } catch (error) {
        console.error(`Audio playback error for ${key}:`, error)
        resolve()
      }
    })
  }
  
  /**
   * D·ª´ng √¢m thanh hi·ªán t·∫°i
   */
  stop() {
    if (this.currentAudio) {
      this.currentAudio.pause()
      this.currentAudio.currentTime = 0
      this.currentAudio.loop = false // Ensure no loop
      this.currentAudio = null
    }
  }
  
  /**
   * T·∫°m d·ª´ng √¢m thanh
   */
  pause() {
    if (this.currentAudio && !this.currentAudio.paused) {
      this.currentAudio.pause()
    }
  }
  
  /**
   * Ti·∫øp t·ª•c ph√°t √¢m thanh
   */
  resume() {
    if (this.currentAudio && this.currentAudio.paused) {
      this.currentAudio.play().catch(console.error)
    }
  }
  
  /**
   * B·∫≠t/t·∫Øt √¢m thanh
   */
  toggleEnabled() {
    this.isEnabled = !this.isEnabled
    if (!this.isEnabled) {
      this.stop()
    }
    this.saveSettings()
    return this.isEnabled
  }
  
  /**
   * ƒê·∫∑t √¢m l∆∞·ª£ng
   * @param {number} volume - √Çm l∆∞·ª£ng t·ª´ 0 ƒë·∫øn 1
   */
  setVolume(volume) {
    this.volume = Math.max(0, Math.min(1, volume))
    if (this.currentAudio) {
      this.currentAudio.volume = this.volume
    }
    this.saveSettings()
  }
  
  /**
   * Ki·ªÉm tra xem c√≥ ƒëang ph√°t √¢m thanh kh√¥ng
   */
  isPlaying() {
    return this.currentAudio && !this.currentAudio.paused
  }
  
  // === Ph∆∞∆°ng th·ª©c ti·ªán √≠ch cho ·ª©ng d·ª•ng ===
  
  /**
   * Ph√°t √¢m thanh b√†i thi
   * @param {number} lessonNumber - S·ªë b√†i thi (1-11)
   */
  async playLesson(lessonNumber) {
    const key = `lesson${lessonNumber}`
    return this.play(key)
  }
  
  /**
   * Ph√°t √¢m thanh b·∫Øt ƒë·∫ßu thi
   */
  async playTestStart() {
    return this.play('lessonStart')
  }
  
  /**
   * Ph√°t ti·∫øng t√∫t nh·∫≠n b√†i thi
   */
  async playTestBeep() {
    return this.play('testBeep')
  }
  
  /**
   * Ph√°t √¢m thanh l·ªói - UPDATED ƒë·ªÉ support t√™n l·ªói tr·ª±c ti·∫øp t·ª´ database
   * @param {string} errorType - Lo·∫°i l·ªói ho·∫∑c t√™n l·ªói t·ª´ database
   */
  async playError(errorType) {
    
    // Th·ª≠ t√¨m √¢m thanh tr·ª±c ti·∫øp b·∫±ng t√™n l·ªói t·ª´ database
    if (this.audioFiles[errorType]) {
      return this.play(errorType)
    }
    
    // Fallback mapping cho c√°c key c≈©
    const errorMap = {
      'wrong_position': 'wrongPosition',
      'not_reached': 'notReachedYet',
      'wrong_gear': 'wrongGear',
      'violation': 'violation',
      'emergency': 'emergency'
    }
    
    const key = errorMap[errorType] || errorType
    return this.play(key)
  }
  
  /**
   * Ph√°t √¢m thanh kh·∫©n c·∫•p
   */
  async playEmergency() {
    return this.play('emergency', { volume: 1.0 })
  }
  
  /**
   * Ph√°t ti·∫øng t·ªânh t√°o nh·∫≠n b·∫°n
   */
  async playAlertSound() {
    return this.play('alertSound', { volume: 1.0 })
  }
  
  /**
   * Ph√°t √¢m thanh th√¥ng b√°o thi ƒë·∫°t
   */
  async playTestPassed() {
    return this.play('testPassed', { volume: 1.0 })
  }
  
  /**
   * Ph√°t √¢m thanh b√†i thi k·∫øt th√∫c
   */
  async playTestCompleted() {
    return this.play('testCompleted', { volume: 1.0 })
  }
  
  /**
   * Test √¢m thanh
   * @param {string} key - Key ƒë·ªÉ test
   */
  async testAudio(key) {
    return this.play(key)
  }
}

// T·∫°o instance duy nh·∫•t
const audioManager = new AudioManager()

// Expose to window for VoiceContext to avoid circular dependency
if (typeof window !== 'undefined') {
  window.__audioManager = audioManager
}

export default audioManager
