# Driving Test App - Cursor Rules

## Project Overview
Web application cho gi√°o vi√™n d·∫°y l√°i xe ch·∫•m ƒëi·ªÉm thi th·ª≠ cho h·ªçc vi√™n. Mobile-first design v·ªõi 11 b√†i thi sa h√¨nh, h·ªá th·ªëng ch·∫•m ƒëi·ªÉm t·ª± ƒë·ªông, v√† t√≠nh nƒÉng Text-to-Speech.

## Memory Bank Usage
CRITICAL: Always read ALL memory bank files at the start of EVERY task:
- `memory-bank/projectbrief.md` - Foundation document, core requirements
- `memory-bank/productContext.md` - Why project exists, user needs
- `memory-bank/activeContext.md` - Current work focus, immediate goals
- `memory-bank/systemPatterns.md` - Architecture, design patterns
- `memory-bank/techContext.md` - Tech stack, database, deployment
- `memory-bank/progress.md` - What's done, what's next, blockers

## Tech Stack & Architecture

### Core Technologies
- **Frontend**: React 18+ + Vite + Tailwind CSS (mobile-first)
- **Backend**: Node.js + Express (minimal API)
- **Database**: MySQL 8.0
- **Containerization**: Docker + Docker Compose
- **Hosting**: Hostinger VPS (~79k VNƒê/th√°ng)
- **Voice**: Web Speech API (Vietnamese support)

### Project Structure
```
driving-test-app/
‚îú‚îÄ‚îÄ frontend/                 # React App
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/       # UI Components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/           # Route components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/           # Custom hooks
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils/           # Voice API, helpers
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ backend/                  # Node.js API
‚îÇ   ‚îú‚îÄ‚îÄ routes/              # API endpoints
‚îÇ   ‚îú‚îÄ‚îÄ models/              # Database models
‚îÇ   ‚îú‚îÄ‚îÄ middleware/          # Auth, validation
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ server.js
‚îú‚îÄ‚îÄ docker-compose.yml
‚îî‚îÄ‚îÄ memory-bank/             # Project documentation
```

## Development Guidelines

### Code Style
- **React**: Function components v·ªõi hooks, TypeScript optional
- **CSS**: Tailwind utility classes, mobile-first responsive design
- **API**: RESTful endpoints, JSON responses, JWT authentication
- **Database**: Sequelize ORM ho·∫∑c raw MySQL queries
- **Error Handling**: Try-catch blocks, meaningful error messages

### Mobile-First Design Rules
- **Touch targets**: Minimum 44px x 44px cho buttons
- **Typography**: Minimum 16px font size
- **Responsive**: Design cho 320px width tr∆∞·ªõc, scale up
- **Performance**: Optimize images, lazy loading, code splitting
- **Voice UX**: Clear audio feedback, toggle controls

### Component Patterns
```jsx
// Example TestCard component
const TestCard = ({ test, onErrorClick, onSpeak }) => {
  return (
    <div className="w-full p-4 bg-white rounded-lg shadow-md mb-4">
      <div className="flex justify-between items-center mb-3">
        <h3 className="text-lg font-semibold">{test.name}</h3>
        <button onClick={() => onSpeak(test.description)}>üîä</button>
      </div>
      <div className="space-y-2">
        {test.errors.map((error, index) => (
          <button
            key={index}
            onClick={() => onErrorClick(error)}
            className="w-full text-left p-2 bg-red-50 rounded border"
          >
            {error.text} (-{error.points}ƒë)
          </button>
        ))}
      </div>
    </div>
  );
};
```

## Data Structure

### 11 B√†i Thi Sa H√¨nh (from Document.md)
1. Xu·∫•t ph√°t - L·ªói: Kh√¥ng th·∫Øt d√¢y an to√†n (-5ƒë), Kh√¥ng b·∫≠t xi nhan (-5ƒë)
2. D·ª´ng xe nh∆∞·ªùng ƒë∆∞·ªùng - L·ªói: D·ª´ng sai v·ªã tr√≠ (-5ƒë)
3. D·ª´ng xe ngang d·ªëc - L·ªói: Kh√¥ng kh·ªüi h√†nh 30s (tru·∫•t quy·ªÅn), T·ª•t d·ªëc >50cm (tru·∫•t quy·ªÅn)
4. Qua v·ªát b√°nh xe - L·ªói: B√°nh xe ƒë√® v·∫°ch (-5ƒë/l·∫ßn)
5. Qua ng√£ t∆∞ c√≥ ƒë√®n - L·ªói: Vi ph·∫°m ƒë√®n ƒë·ªè (-10ƒë), Qu√° 20s (tru·∫•t quy·ªÅn)
6. ƒê∆∞·ªùng v√≤ng ch·ªØ S - L·ªói: B√°nh xe ƒë√® v·∫°ch (-5ƒë/l·∫ßn), Qu√° th·ªùi gian (-5ƒë)
7. Gh√©p xe d·ªçc - L·ªói: B√°nh xe ƒë√® v·∫°ch (-5ƒë), Kh√¥ng l√πi h·∫øt chu·ªìng (-5ƒë)
8. T·∫°m d·ª´ng ƒë∆∞·ªùng s·∫Øt - L·ªói: D·ª´ng sai v·ªã tr√≠ (-5ƒë)
9. TƒÉng t·ªëc ƒë∆∞·ªùng b·∫±ng - L·ªói: Kh√¥ng ƒë·ªïi s·ªë ƒë√∫ng (-5ƒë)
10. Gh√©p xe ngang - L·ªói: B√°nh xe ch√®n v·∫°ch (-5ƒë), Kh√¥ng v√†o ƒë∆∞·ª£c n∆°i ƒë·ªó (-5ƒë)
11. K·∫øt th√∫c - L·ªói: Kh√¥ng b·∫≠t xi nhan ph·∫£i (-5ƒë)

### Scoring System
- **ƒêi·ªÉm kh·ªüi ƒë·∫ßu**: 100 ƒëi·ªÉm
- **Tr·ª´ ƒëi·ªÉm**: -5 ƒëi·ªÉm (l·ªói th∆∞·ªùng), -10 ƒëi·ªÉm (nghi√™m tr·ªçng)
- **Tru·∫•t quy·ªÅn**: 0 ƒëi·ªÉm (l·ªói c·ª±c nghi√™m tr·ªçng)
- **ƒê·∫≠u**: >= 80 ƒëi·ªÉm

## Docker Configuration

### Development Environment
```yaml
# docker-compose.yml
version: '3.8'
services:
  frontend:
    build: ./frontend
    ports: ["3000:80"]
    depends_on: [backend]
  
  backend:
    build: ./backend
    ports: ["5000:5000"]
    environment:
      - DB_HOST=mysql
    depends_on: [mysql]
  
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: driving_test
    ports: ["3306:3306"]
```

### Production Deployment
- **Multi-stage builds** cho smaller images
- **Environment variables** cho configuration
- **Health checks** cho container monitoring
- **Volume persistence** cho MySQL data

## API Design

### Authentication Endpoints
- `POST /api/auth/register` - ƒêƒÉng k√Ω gi√°o vi√™n
- `POST /api/auth/login` - ƒêƒÉng nh·∫≠p
- `GET /api/auth/profile` - Th√¥ng tin user

### Test Management Endpoints
- `GET /api/tests` - Danh s√°ch 11 b√†i thi
- `POST /api/sessions` - T·∫°o phi√™n thi m·ªõi
- `PUT /api/sessions/:id` - C·∫≠p nh·∫≠t k·∫øt qu·∫£
- `GET /api/sessions` - L·ªãch s·ª≠ phi√™n thi

## Voice Integration

### Web Speech API Usage
```javascript
const speakText = (text) => {
  if ('speechSynthesis' in window) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'vi-VN';
    utterance.rate = 0.8;
    speechSynthesis.speak(utterance);
  }
};
```

### Voice Features
- **Test descriptions**: AI ƒë·ªçc t√™n v√† m√¥ t·∫£ b√†i thi
- **Error announcements**: AI ƒë·ªçc chi ti·∫øt l·ªói khi click
- **Score updates**: AI th√¥ng b√°o ƒëi·ªÉm hi·ªán t·∫°i
- **Controls**: Toggle on/off, volume control

## Performance Requirements

### Frontend Performance
- **Page load**: < 2 seconds on mobile
- **Bundle size**: < 500KB gzipped
- **Image optimization**: WebP format, lazy loading
- **Code splitting**: Route-based lazy loading

### Backend Performance
- **API response**: < 500ms for most endpoints
- **Database queries**: Proper indexing, connection pooling
- **Memory usage**: < 512MB per container
- **Error handling**: Graceful degradation

## Testing Strategy

### Frontend Testing
- **Component tests**: React Testing Library
- **E2E tests**: Playwright cho mobile workflows
- **Voice tests**: Manual testing tr√™n real devices
- **Accessibility**: Screen reader compatibility

### Backend Testing
- **Unit tests**: Jest cho business logic
- **Integration tests**: API endpoint testing
- **Database tests**: MySQL query validation
- **Load tests**: Performance under concurrent users

## Deployment Checklist

### Pre-deployment
- [ ] All tests passing
- [ ] Docker images built successfully
- [ ] Environment variables configured
- [ ] Database migrations ready
- [ ] SSL certificates prepared

### Production Setup
- [ ] Hostinger VPS configured
- [ ] Docker Compose production file
- [ ] Nginx reverse proxy setup
- [ ] MySQL backup strategy
- [ ] Monitoring v√† logging setup

## Common Patterns

### Error Handling
```javascript
// Frontend error boundary
const ErrorBoundary = ({ children }) => {
  // Handle React errors gracefully
};

// Backend error middleware
const errorHandler = (err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    success: false,
    error: { message: 'Something went wrong' }
  });
};
```

### State Management
```javascript
// React Context for global state
const AppContext = createContext();

const AppProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [currentSession, setCurrentSession] = useState(null);
  
  return (
    <AppContext.Provider value={{ user, currentSession, setUser, setCurrentSession }}>
      {children}
    </AppContext.Provider>
  );
};
```

## Security Considerations

### Authentication Security
- JWT tokens v·ªõi reasonable expiration
- Password hashing v·ªõi bcrypt
- CORS configuration cho production
- Rate limiting cho API endpoints

### Input Validation
- Joi schemas cho API validation
- XSS protection v·ªõi proper escaping
- SQL injection prevention v·ªõi parameterized queries
- File upload restrictions (n·∫øu c√≥)

## Monitoring & Maintenance

### Application Monitoring
- Error tracking v·ªõi structured logging
- Performance metrics collection
- Database query monitoring
- User activity logging

### Maintenance Tasks
- Regular database backups
- Docker image updates
- Security patch applications
- Performance optimization reviews

Always follow these rules v√† refer to memory bank files for detailed context. Update memory bank khi c√≥ significant changes ho·∫∑c new learnings.